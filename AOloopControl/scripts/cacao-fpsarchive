#!/bin/bash



# exit on error
#set -o errexit



# number of arguments to script
NBARGS=1






# ======================= PROCESS NAME =================================
pnameFull=`echo "$0" | sed "s/\.\///g"`


pname=$( basename $pnameFull )

USAGESTRING="$(basename $0) [-h] \"<filter>\""




function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : cacao archive $(tput sgr0)"
    echo "source : $0"
    echo "------------------------------------------------------------------------"
    echo ""
    echo "Archive data contained in Function Parameter Structure (FPS)"
    echo "Archive entries listed in <filter>.outlog"
    echo ""
    echo ""
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $USAGESTRING"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)            (h)elp and exit"
    echo "     $(tput bold)-t$(tput sgr0)            (t)est mode: do not archive, only list operations to be performed"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       Archive cacao data\n" "$0"
}


EXITSTATUS=0



function checkFile {
    if [ -f $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}


function checkFileCreate {
    if [ -f $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 3)$(tput bold)  INFO  $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found: Creating"
        touch $1
    fi
}

function checkFileInfoOptional {
    if [ -f $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 3)$(tput bold)  INFO  $(tput sgr0)] Optional file $(tput bold)$1$(tput sgr0) not found"
    fi
}


function checkDir {
    if [ -d $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory \"$(tput bold)$1$(tput sgr0)\" found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory \"$(tput bold)$1$(tput sgr0)\" not found"
        EXITSTATUS=1
    fi
}


function checkDirWrite {
    if [ -w $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory \"$(tput bold)$1$(tput sgr0)\" writeable"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory \"$(tput bold)$1$(tput sgr0)\" not writeable"
        EXITSTATUS=1
    fi
}


function cmdexists()
{
    command -v "$1" >/dev/null 2>&1
}


function checkCommand {
    if cmdexists $1; then
        if [ ${QUIET} = 0 ]; then
            echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
        fi
        COMMAND_FOUND=1
    else
        if [ ${QUIET} = 0 ]; then
            echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."
        fi
        COMMAND_FOUND=0
        EXITSTATUS=1;
    fi
}











# ================= OPTIONS =============================
# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done



TESTMODE=0

while getopts :ht FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        t)
            echo "test mode: no archive operation performed"
            TESTMODE=1
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option $OPTARG not allowed."
            printHELP
            ;;
    esac
done
shift $((OPTIND-1))




if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    echo "Usage :"
    echo "  $USAGESTRING"
    echo ""
    exit
fi



if [[ -z "${CACAOARCHIVEDIR}" ]]; then
    echo "Environment variable CACAOARCHIVEDIR not set"
    echo "-> Using ${MILK_SHM_DIR}/CACAOARCHIVEDIR for archival"
    CACAOARCHIVEDIRABS="${MILK_SHM_DIR}/CACAOARCHIVEDIR"
    if [ ! -d ${CACAOARCHIVEDIRABS} ]; then
        mkdir -p ${CACAOARCHIVEDIRABS}
        echo "WARNING: Archiving to tmpfs directory - archive will not survive reboot !"
    fi
else
    CACAOARCHIVEDIRABS="/${CACAOARCHIVEDIR}"
    echo "Using ${MILK_SHM_DIR}/CACAOARCHIVEDIR for archival"
fi

checkDir ${CACAOARCHIVEDIRABS}
checkDirWrite ${CACAOARCHIVEDIRABS}


if [ $EXITSTATUS = 1 ]; then
    exit
fi



echo ""


function archivefile {
    #echo "------ archiving $1"
    timestringUT=$( cat $1 | cut -d " " -f1 )
    dateUT=$( cat $1 | cut -d "T" -f1 )
    #echo "dateUT = ${dateUT}"
    timeUT=$( cat $1 | cut -d " " -f1 | cut -d "T" -f2 )
    #echo "timeUT = ${timeUT}"

    inputdirname=$( dirname $1 )
    #echo "dirname : ${inputdirname}"
    inputfname=$( cat $1 | cut -d " " -f3 )
    inputextname=$( cat $1 | cut -d " " -f4 )

    fpsname=$( cat $1 | cut -d " " -f5 )

    logname=$( cat $1 | cut -d " " -f6 )
    outputextname=$( cat $1 | cut -d " " -f7 )

    outdirname="${CACAOARCHIVEDIRABS}/${dateUT}/${fpsname}/${logname}.${outputextname}"
    outfilename="${logname}.${timestringUT}.${outputextname}"


    echo "ARCHIVING ${inputdirname}/${inputfname}.${inputextname} -> ${outdirname}/${outfilename}"
    if [ ${TESTMODE} = 0 ]; then
        mkdir -p ${outdirname}
        cp ${inputdirname}/${inputfname}.${inputextname} ${outdirname}/${outfilename}
    else
        echo "TEST MODE - COMMAND NOT EXECUTED : mkdir -p ${outdirname}"
        echo "TEST MODE - COMMAND NOT EXECUTED : cp ${inputdirname}/${inputfname}.${inputextname} ${outdirname}/${outfilename}"
    fi

    echo ""
}


echo "Searching for $1.outlog"
find . -wholename "$1.outlog" -print0 |
while IFS= read -r -d '' fname; do
    archivefile "${fname}"
done
