#!/bin/bash

NBARGS=0
execname="./AOloopControl"
statusfile="./status/stat_DMcombON.txt"







printHELP ()
{
    echo
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : STOP DM PROCESS $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo " "
    echo " "
    echo " "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [options]"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "   --help -h             print (h)elp and exit"
    echo "   --help1               print 1 line summary"
    echo "   -f                    force don't check status"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       Stop DM process\n" "$0"
}




EXITSTATUS=0

function checkFile {
    if [ -f $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}

function checkDir {
    if [ -d $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}

function cmdexists()
{
    command -v "$1" >/dev/null 2>&1
}

function checkCommand {
    if cmdexists $1; then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
    fi
}



# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done



### Start getopts code ###
while getopts :hf FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        f)
            echo "Forcing DM stop"
            rm $statusfile
            echo " ON" > $statusfile
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
    fi
    printHELP
    exit
fi




# ======================= CHECK REQUIRED DIRS & FILES =================================
echo ""


# ============================= CHECK IF COMMAND EXISTS ==========================















##############################################
# FUNCTION: READ STATUS FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
#
# param value is stored in variable "paramvalue"
function StatReadStat {
    mkdir -p status
    file="./status/stat_$1.txt"
    if [ -f "$file" ]; then
        statusvalue=$( head -1 $file )
    else
        statusvalue="$2"
        echo "$2" > $file
    fi
}


##############################################
# FUNCTION: READ PARAMETER FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
#
# param value is stored in variable "paramvalue"
function ConfReadParam {
    file="./conf/param_$1.txt"
    if [ -f "$file" ]; then
        paramvalue=$( head -1 $file )
    else
        paramvalue="$2"
        echo "$2" > $file
    fi
}








##########################################
# CHECK IF ALREADY RUNNING
##########################################

StatReadStat DMcombON "OFF"; DMcombONstat="$statusvalue"

if [ "$DMcombONstat" = "OFF" ]; then
    echo "DMcomb already OFF"
    echo "Use -f option to force"
    exit
fi







##########################################
# READ REQUIRED PARAMETERS
##########################################


# READ LOOP NUMBER
if [ -f LOOPNUMBER ]; then
    LOOPNUMBER=$( head -1 LOOPNUMBER )
else
    LOOPNUMBER="7"
    echo "$LOOPNUMBER" > LOOPNUMBER
fi

ConfReadParam DMindex "00"; DMindex="$paramvalue" # DM index









tmuxname="dm${DMindex}comboff"

tmux kill-session -t $tmuxname
sleep 0.2
tmux new-session -d -s $tmuxname
sleep 0.2


tmux send-keys -t $tmuxname "$execname -n dm${DMindex}comboff" C-m
tmux send-keys -t $tmuxname "aoloopcontroldmcomboff ${DMindex}" C-m
tmux send-keys -t $tmuxname "exitCLI" C-m
tmux send-keys -t $tmuxname "exit" C-m

#    tmux kill-session -t $tmuxname # not necessary - just making sure
tmuxname="dm${DMindex}comb"
tmux send-keys -t $tmuxname "exit" C-m
tmux send-keys -t $tmuxname "exit" C-m
#    tmux kill-session -t $tmuxname # not necessary - just making sure


echo "OFF" > "./status/stat_DMcombON.txt"
