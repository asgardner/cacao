#!/bin/bash

# number of arguments to script
NBARGS=0

LOOPNUMBER=$( head -1 LOOPNUMBER )


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`


function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname :CONFIGURE CPU FOR LOW-LATENCY AO LOOP $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo " Configures LAN, CPU cores, CPU sets"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-ho]"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)          help"
    echo "     $(tput bold)-o$(tput sgr0)          turn OFF low-latency configuration (default is ON)"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       configure CPU for low-latency AO loop operation\n" "$0"
}





# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done




ON=1 # default

while getopts :ho FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        o)
            echo "TURNING LOW-LATENCY SETTINGS OFF"
            ON="0"
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi





# =================================================================================
# =========== Setup low latency TCP
# =================================================================================

if [ "$ON" = "1" ]

then

    sudo ethtool -C eth2 rx-usecs 0
    sudo ethtool -C eth4 rx-usecs 0
    sudo ethtool -C eth2 tx-usecs 0
    sudo ethtool -C eth4 tx-usecs 0

    sudo ethtool -A eth2 autoneg off rx off tx off
    sudo ethtool -A eth4 autoneg off rx off tx off

    sudo /sbin/sysctl -w net.ipv6.tcp_low_latency=1
    sudo /sbin/sysctl -w net.ipv6.tcp_sack=0
    sudo /sbin/sysctl -w net.ipv6.tcp_timestamps=0
    sudo /sbin/sysctl -w net.ipv6.tcp_fastopen=1

    # Enable low latency mode for TCP
    sudo /sbin/sysctl -w net.ipv4.tcp_low_latency=1

    # Disable the TCP selective acks option for better CPU utilization
    sudo /sbin/sysctl -w net.ipv4.tcp_sack=0

    # Disable the TCP timestamps option for better CPU utilization
    sudo /sbin/sysctl -w net.ipv4.tcp_timestamps=0

    sudo /sbin/sysctl -w net.ipv4.tcp_fastopen=1



    # Increase the maximum length of processor input queues:
    sudo /sbin/sysctl -w net.core.netdev_max_backlog=250000

    # Increase the TCP maximum and default buffer sizes using setsockopt():
    sudo /sbin/sysctl -w net.core.rmem_max=16777216
    sudo /sbin/sysctl -w net.core.wmem_max=16777216
    sudo /sbin/sysctl -w net.core.rmem_default=16777216
    sudo /sbin/sysctl -w net.core.wmem_default=16777216
    sudo /sbin/sysctl -w net.core.optmem_max=16777216

    # Increase memory thresholds to prevent packet dropping:
    sudo /sbin/sysctl -w net.ipv4.tcp_mem="16777216 16777216 16777216"

    # Increase the Linux* auto-tuning of TCP buffer limits. The minimum, default, and maximum number of bytes to use are shown below (in the order minimum, default, and maximum):
    sudo /sbin/sysctl -w net.ipv4.tcp_rmem="4096 87380 16777216"
    sudo /sbin/sysctl -w net.ipv4.tcp_wmem="4096 65536 16777216"





fi





# =================================================================================
# =========== TURN OFF HYPERTHREADING
# =================================================================================

if [ "$ON" = "1" ]; then
    echo "Turn off hyperthreading"
    sudo -s << EOF
echo 1 > /sys/devices/system/cpu/cpu0/online
echo 1 > /sys/devices/system/cpu/cpu1/online
echo 1 > /sys/devices/system/cpu/cpu2/online
echo 1 > /sys/devices/system/cpu/cpu3/online
echo 1 > /sys/devices/system/cpu/cpu4/online
echo 1 > /sys/devices/system/cpu/cpu5/online
echo 1 > /sys/devices/system/cpu/cpu6/online
echo 1 > /sys/devices/system/cpu/cpu7/online
echo 1 > /sys/devices/system/cpu/cpu8/online
echo 1 > /sys/devices/system/cpu/cpu9/online
echo 1 > /sys/devices/system/cpu/cpu10/online
echo 1 > /sys/devices/system/cpu/cpu11/online
echo 1 > /sys/devices/system/cpu/cpu12/online
echo 1 > /sys/devices/system/cpu/cpu13/online
echo 1 > /sys/devices/system/cpu/cpu14/online
echo 1 > /sys/devices/system/cpu/cpu15/online
echo 1 > /sys/devices/system/cpu/cpu16/online
echo 1 > /sys/devices/system/cpu/cpu17/online
echo 1 > /sys/devices/system/cpu/cpu18/online
echo 1 > /sys/devices/system/cpu/cpu19/online
echo 1 > /sys/devices/system/cpu/cpu20/online
echo 1 > /sys/devices/system/cpu/cpu21/online
echo 1 > /sys/devices/system/cpu/cpu22/online
echo 1 > /sys/devices/system/cpu/cpu23/online
echo 1 > /sys/devices/system/cpu/cpu24/online
echo 1 > /sys/devices/system/cpu/cpu25/online
echo 1 > /sys/devices/system/cpu/cpu26/online
echo 1 > /sys/devices/system/cpu/cpu27/online

echo 0 > /sys/devices/system/cpu/cpu28/online
echo 0 > /sys/devices/system/cpu/cpu29/online
echo 0 > /sys/devices/system/cpu/cpu30/online
echo 0 > /sys/devices/system/cpu/cpu31/online
echo 0 > /sys/devices/system/cpu/cpu32/online
echo 0 > /sys/devices/system/cpu/cpu33/online
echo 0 > /sys/devices/system/cpu/cpu34/online
echo 0 > /sys/devices/system/cpu/cpu35/online
echo 0 > /sys/devices/system/cpu/cpu36/online
echo 0 > /sys/devices/system/cpu/cpu37/online
echo 0 > /sys/devices/system/cpu/cpu38/online
echo 0 > /sys/devices/system/cpu/cpu39/online
echo 0 > /sys/devices/system/cpu/cpu40/online
echo 0 > /sys/devices/system/cpu/cpu41/online
echo 0 > /sys/devices/system/cpu/cpu42/online
echo 0 > /sys/devices/system/cpu/cpu43/online
echo 0 > /sys/devices/system/cpu/cpu44/online
echo 0 > /sys/devices/system/cpu/cpu45/online
echo 0 > /sys/devices/system/cpu/cpu46/online
echo 0 > /sys/devices/system/cpu/cpu47/online
echo 0 > /sys/devices/system/cpu/cpu48/online
echo 0 > /sys/devices/system/cpu/cpu49/online
echo 0 > /sys/devices/system/cpu/cpu50/online
echo 0 > /sys/devices/system/cpu/cpu51/online
echo 0 > /sys/devices/system/cpu/cpu52/online
echo 0 > /sys/devices/system/cpu/cpu53/online
echo 0 > /sys/devices/system/cpu/cpu54/online
echo 0 > /sys/devices/system/cpu/cpu55/online
exit
EOF

else


    sudo -s << EOF
echo 1 > /sys/devices/system/cpu/cpu0/online
echo 1 > /sys/devices/system/cpu/cpu1/online
echo 1 > /sys/devices/system/cpu/cpu2/online
echo 1 > /sys/devices/system/cpu/cpu3/online
echo 1 > /sys/devices/system/cpu/cpu4/online
echo 1 > /sys/devices/system/cpu/cpu5/online
echo 1 > /sys/devices/system/cpu/cpu6/online
echo 1 > /sys/devices/system/cpu/cpu7/online
echo 1 > /sys/devices/system/cpu/cpu8/online
echo 1 > /sys/devices/system/cpu/cpu9/online
echo 1 > /sys/devices/system/cpu/cpu10/online
echo 1 > /sys/devices/system/cpu/cpu11/online
echo 1 > /sys/devices/system/cpu/cpu12/online
echo 1 > /sys/devices/system/cpu/cpu13/online
echo 1 > /sys/devices/system/cpu/cpu14/online
echo 1 > /sys/devices/system/cpu/cpu15/online
echo 1 > /sys/devices/system/cpu/cpu16/online
echo 1 > /sys/devices/system/cpu/cpu17/online
echo 1 > /sys/devices/system/cpu/cpu18/online
echo 1 > /sys/devices/system/cpu/cpu19/online
echo 1 > /sys/devices/system/cpu/cpu20/online
echo 1 > /sys/devices/system/cpu/cpu21/online
echo 1 > /sys/devices/system/cpu/cpu22/online
echo 1 > /sys/devices/system/cpu/cpu23/online
echo 1 > /sys/devices/system/cpu/cpu24/online
echo 1 > /sys/devices/system/cpu/cpu25/online
echo 1 > /sys/devices/system/cpu/cpu26/online
echo 1 > /sys/devices/system/cpu/cpu27/online

echo 1 > /sys/devices/system/cpu/cpu28/online
echo 1 > /sys/devices/system/cpu/cpu29/online
echo 1 > /sys/devices/system/cpu/cpu30/online
echo 1 > /sys/devices/system/cpu/cpu31/online
echo 1 > /sys/devices/system/cpu/cpu32/online
echo 1 > /sys/devices/system/cpu/cpu33/online
echo 1 > /sys/devices/system/cpu/cpu34/online
echo 1 > /sys/devices/system/cpu/cpu35/online
echo 1 > /sys/devices/system/cpu/cpu36/online
echo 1 > /sys/devices/system/cpu/cpu37/online
echo 1 > /sys/devices/system/cpu/cpu38/online
echo 1 > /sys/devices/system/cpu/cpu39/online
echo 1 > /sys/devices/system/cpu/cpu40/online
echo 1 > /sys/devices/system/cpu/cpu41/online
echo 1 > /sys/devices/system/cpu/cpu42/online
echo 1 > /sys/devices/system/cpu/cpu43/online
echo 1 > /sys/devices/system/cpu/cpu44/online
echo 1 > /sys/devices/system/cpu/cpu45/online
echo 1 > /sys/devices/system/cpu/cpu46/online
echo 1 > /sys/devices/system/cpu/cpu47/online
echo 1 > /sys/devices/system/cpu/cpu48/online
echo 1 > /sys/devices/system/cpu/cpu49/online
echo 1 > /sys/devices/system/cpu/cpu50/online
echo 1 > /sys/devices/system/cpu/cpu51/online
echo 1 > /sys/devices/system/cpu/cpu52/online
echo 1 > /sys/devices/system/cpu/cpu53/online
echo 1 > /sys/devices/system/cpu/cpu54/online
echo 1 > /sys/devices/system/cpu/cpu55/online
exit
EOF

fi









# =================================================================================
# =========== set CPU SETS
# =================================================================================


# numactl --hardware
#
# available: 2 nodes (0-1)
# node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26
# node 0 size: 257860 MB
# node 0 free: 13619 MB
# node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27
# node 1 size: 258036 MB
# node 1 free: 256678 MB
# node distances:
# node   0   1
#   0:  10  21
#  1:  21  10




# ================ CPU 0 ====================
# cores: 0 2 4 6 8 10 12 14 16 18 20 22 24 26

# system         non real-time processes                 0 1 2 4 6 8 10 12 14
# dmcomb         DM combine channels                     24
# dmdrv          MEMs DM driver                          26
# aol0log        Log streams (non-RT)                    16 18
# RTmon          For RT monitoring                       20

# ================ CPU 1 ===================
# cores: 1 3 5 7 9 11 13 15 17 19 21 23 25 27

# aol0RT         real-time loop computation              3 5 7 9 11 13 15
# ircam          Fast focal plane IR cam                 17
# aol0RT1        modal extraction (WFS output)           19
# aol0RT2        modal processing (DM contr. channel)    21
# aol0COM        WFS camera communication                23 25
# ocamdec        ocam image decoding                     27



if [ "$ON" = "1" ]; then
    sudo cset set --cpu 0,1,2,4,6,8,10,12,14 --set system
    #sudo cset set --cpu 22 --set LQG
    sudo cset set --cpu 24                   --cpu_exclusive --set dmcomb
    sudo cset set --cpu 26                   --cpu_exclusive --set dmdrv

    sudo cset set --cpu 3,5,7,9,11,13        --cpu_exclusive --set aol${LOOPNUMBER}RT
    sudo cset set --cpu 15,19                --cpu_exclusive --set aol${LOOPNUMBER}RT1
    sudo cset set --cpu 21                   --cpu_exclusive --set aol${LOOPNUMBER}RT2
    sudo cset set --cpu 23,25                --cpu_exclusive --set aol${LOOPNUMBER}COM
    sudo cset set --cpu 27                   --cpu_exclusive --set ocamdec
    sudo cset set --cpu 17                   --cpu_exclusive --set ircam
    sudo cset set --cpu 16,18                --cpu_exclusive --set aol${LOOPNUMBER}log
    sudo cset set --cpu 20                   --cpu_exclusive --set RTmon



    # move as much as possible to system
    sudo cset proc -m -f root -t system
    sudo cset proc -k -f root -t system


    pidlist=$( pgrep aolrun|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t aol${LOOPNUMBER}RT


    #pidlist=$( pgrep TCP|xargs echo | sed 's/ /,/g' )
    #sudo cset proc -m -p $pidlist -t aol${LOOPNUMBER}COM

    pidlist=$( pgrep dm00comb|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t dmcomb
    pidlist=$( pgrep dm01comb|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t dmcomb

    pidlist=$( pgrep ocam|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t ocamdec

    pidlist=$( pgrep bmc|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t dmdrv


    pidlist=$( pgrep modeval|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t aol${LOOPNUMBER}RT1


    pidlist=$( pgrep logshim|xargs echo | sed 's/ /,/g' )
    sudo cset proc -m -p $pidlist -t aol${LOOPNUMBER}log


    # RTmon should be used for RT process monitoring and testing
    # to run a process/job/script within RTmon, use:
    #
    # cset proc -s RTmon -e bash
    #


else
    echo "Destroying CPU sets"
    sudo cset se -d LQG
    sudo cset se -d dmcomb
    sudo cset se -d dmdrv
    sudo cset se -d aol${LOOPNUMBER}RT
    sudo cset se -d aol${LOOPNUMBER}RT1
    sudo cset se -d aol${LOOPNUMBER}RT2
    sudo cset se -d aol${LOOPNUMBER}COM
    sudo cset se -d aol${LOOPNUMBER}log
    sudo cset se -d RTmon
    sudo cset se -d ircam
    sudo cset se -d ocamdec
    sudo cset se -d system
fi

# show CPU sets
cset set -l





# =================================================================================
# =========== set CPU PERFORMANCE SETTINGS
# =================================================================================

# Disable real-time CPU throttling
sudo sh -c "echo -1 > /proc/sys/kernel/sched_rt_runtime_us"


if [ "$ON" = "1" ]; then
    tmux new-session -d -s cpulatency
    tmux send-keys -t cpulatency "sudo /home/scexao/bin/setlatency 0" C-m
else
    tmux kill-session -t cpulatency
fi






# =================================================================================
# =========== set IRQs
# =================================================================================


# Stop IRQbalance
sudo service irqbalance stop

# Create hex bitmask to ban RT cores from irqbalance
# Banned CPUs are all RT CPUs
#
# aol0RT         real-time loop computation              3 5 7 9 11 13 15 17
# aol0RT1        modal extraction (WFS output)           19
# aol0RT2        modal processing (DM contr. channel)    21
# ocamdec        ocam image decoding                     27
# 0001010101010101010101000001
# 1110101010101010101010111110

#echo "obase=16;ibase=2;0001010101010101010101000001"|bc > IRQBALANCE_BANNED_CPUS.txt
#echo "obase=16;ibase=2;111010101010101010101011111"|bc > IRQBALANCE_BANNED_CPUS.txt
#export IRQBALANCE_BANNED_CPUS=$(cat IRQBALANCE_BANNED_CPUS.txt)
#export IRQBALANCE_BANNED_CPUS=1555541

# REDIRECT IRQs on RT cpus

rm _cpu*irq_t0.txt &> /dev/null
rm _cpu*irq_t1.txt &> /dev/null

rm _cpuRTirq_t0.txt &> /dev/null
rm _cpuRTirq_t1.txt &> /dev/null
rm _cpu*irq_active.txt &> /dev/null
rm _cpuRTirq_active.txt &> /dev/null

touch _cpuRTirq.txt

# protected cores
#cpulist=( 3 5 7 9 11 13 15 17 19 21 27)
cpulist=( 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27)

# where to move IRQs (bitmask)
# deploy to cpus 0, 1 and 2
# Do not include leading zeros
cpudest="111"


twait=5

echo "Monitoring IRQs for $twait second ..."


for t in 0 1

do

    for cpu in ${cpulist[*]}
    do
        cpu1=$(( $cpu + 2 ))
        cat /proc/interrupts | awk -v ind=$cpu1 '{if ($ind>0) print $0}' | sed 's/://g' | awk '{if ($1 ~  /^[0-9]*$/) print $0}'  > _cpu${cpu}irq_t$t.txt
        awk '{print $1}' _cpu${cpu}irq_t$t.txt >> _cpuRTirq_t$t.txt
    done

    sleep $twait

done





for cpu in ${cpulist[*]}
do
    cnt=$( wc -l _cpu${cpu}irq_t0.txt | cut -f 1 -d " ")
    cpu1=$(( $cpu + 2 ))
    awk -v ind=$cpu1 '{print $1, $ind}' _cpu${cpu}irq_t0.txt > _irqt0.txt
    awk -v ind=$cpu1 '{print $1, $ind}' _cpu${cpu}irq_t1.txt > _irqt1.txt

    comm -13 _irqt0.txt _irqt1.txt > _cpu${cpu}irq_active.txt
    cntactive=$( wc -l _cpu${cpu}irq_active.txt | cut -f 1 -d " ")
    cat _cpu${cpu}irq_active.txt >> _cpuRTirq_active.txt
    printf "IRQs on RT cpu %2d  :  %3d     ACTIVE : %3d\n" $cpu $cnt $cntactive
done



cnt=$( wc -l _cpuRTirq_active.txt | cut -f 1 -d " ")
irqmask=$( echo "obase=16;ibase=2;${cpudest}"|bc )
printf "\n%3d IRQs will be moved to cpus %d  (mask : %s)\n\n" $cnt $cpudest $irqmask

awk -v MASK=$irqmask '{printf("echo %d > /proc/irq/%d/smp_affinity\n", MASK, $1)}' _cpuRTirq_active.txt  > _irqmove_cmd.txt

chmod +x _irqmove_cmd.txt

sudo ./_irqmove_cmd.txt


# NOTES

# to monitor an irq:
# watch -n 1 -d grep "271:" /proc/interrupts





# =================================================================================
# =========== Optimize GPU performance
# =================================================================================
sudo nvidia-smi -pm 1

# To querry clocks:
# nvidia-smi -i 0-q -d SUPPORTED_CLOCKS

# To view current clocks:
# nvidia-smi -i 0 -q -d CLOCK

sudo sh -c "sudo nvidia-smi -i 1 -ac 3505,1582"
sudo sh -c "sudo nvidia-smi -i 2 -ac 3505,1582"
sudo sh -c "sudo nvidia-smi -i 4 -ac 3505,1582"
sudo sh -c "sudo nvidia-smi -i 5 -ac 3505,1582"
sudo sh -c "sudo nvidia-smi -i 8 -ac 3505,1582"






# =================================================================================
# =========== set precision timing protocol
# =================================================================================

if [ "$ON" = "1" ]; then
    ssh scexao@scexao2 "tmux new-session -d -s ptp"
    ssh scexao@scexao2 "tmux send-keys -t ptp \"ls\" C-m"
fi

datestr="$( date -u )"
echo "$datestr" > cpuconfigOK





exit

########## NOTES ##########################################################



# BIOS settings

System Profile Settings      System Profile                       Performance Per Watt -> Custom
System Profile Settings      CPU Power Management                 System DBPM          -> Maximum Performance
System Profile Settings      Memory Frequency                     Maximum Performance  =  Maximum Performance
System Profile Settings      Turbo Boost                          Enabled              -> Disabled
System Profile Settings      C1E                                  Enabled              -> Disabled
System Profile Settings      C States                             Enabled              -> Disabled
System Profile Settings      Monitor/Mwait                        Enabled              -> Disabled
System Profile Settings      Memory Patrol Scrub                  Enabled              =  Enabled
System Profile Settings      Memory Refresh Rate                  1x                   =  1x
Memory Settings              Memory Mode Advanced                 ECC or Optimizer     -> Optimizer
Memory Settings              Memory Node                          Disabled             =  Disabled
Processor Settings           Logical Processor                    Enabled              -> Disabled
Processor Settings           Virtualization Technology            Enabled              -> Disabled
Processor Settings           QPI Speed                            Maximum Data Rate    =  Maximum Data Rate
Processor Settings           Alternate RTID Setting               Disabled             =  Disabled
Processor Settings           Adjacent Cache Line Prefetch         Enabled              =  Enabled
Processor Settings           Hardware Prefetcher                  Enabled              =  Enabled
Processor Settings           DCU Streamer Prefetcher              Enabled              =  Enabled
Processor Settings           DCU IP Prefetcher                    Enabled              =  Enabled




# Tools

## CHECKING LATENCIES
sudo cyclictest --smp -p98 -m -i 500 -D 3

## watching non-maskable hardware interrupts
watch -d -n 1 grep NMI /proc/interrupts







# Misc / notes / things to do



## Add to kernel boot:
nosoftlockup intel_idle.max_cstate=0 processor.max_cstate=0 mce=ignore_ce idle=poll


## Tickless kernel

## Disable System Management Interrupts (SMI): USB, TCO timer

smi.c to do
    mask_bits(TCO_EN_BIT, smi_en_addr);
    instead of
    mask_bits(GBL_SMI_EN_BIT, smi_en_addr);
    (and corresponding set_bits() later), the TCO timer interrupts were
    knocked out and the latency stayed below 7µs on my machine for hours,
    even under heavy load.

1) Use PS/2 mouse and keyboard,
2) Disable USB mouse and keyboard in BIOS,
3) Compile an ACPI-enabled Kernel.
This alone should reduce the RTAI responsivity loss from 500µs each
second to 100µs each 38 seconds.
4) Disable TCO timer generation of SMIs (TCO_EN bit in the SMI_EN register).
The latency should drop to ~10µs permanently, at the expense of not
being able to use the i8xx_tco watchdog.
