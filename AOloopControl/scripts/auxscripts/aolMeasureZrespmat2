#! /bin/bash

# number of arguments to script
NBARGS=5


pname=`echo "$0" | sed "s/\.\///g"`



function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : ACQUIRE ZONAL RESPONSE MATRIX $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "  measures system zonal response matrix"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-hrc] <ampl[um]> <tdelay[frame]> <nb frames ave> <nb frames excl> <normalize flag>"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)                  help"
    echo "     $(tput bold)-c$(tput sgr0) <CPUset>         use CPU set"
    echo "     $(tput bold)-d$(tput sgr0) <delayRM1us>     DM command delay [us]"
    echo "     $(tput bold)-n$(tput sgr0) <NBcycle>        Number of poke cycles (default=0: poke until killed)"
    echo "     $(tput bold)-i$(tput sgr0) <NBcycleInner>   Number of poke inner cycles (default=3)"
    echo "     $(tput bold)-r$(tput sgr0)                  (r)e-use AO shared memory structure, do not re-create it"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "     <ampl[um]>           RM amplitude on DM"
    echo "     <tdelay[frame]>      AO system delay"
    echo "     <nb frames ave>      Number of WFS frames to average for each DM state"
    echo "     <nb frames excl>     Number of WFS frames to be excluded upon DM state change"
    echo "     <normalize flag>     1 if WFS frames to be normalized"
    echo ""
    echo " $(tput bold)OUTPUT:$(tput sgr0)"
    echo "     ./zrespmat0.fits           : zonal response matrix"
    echo "     ./wfsref00.fits            : reference"
    echo
    echo "runs forever until killed with USR1 signal"
    #echo "Default output files updated at each cycle"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Acquire zonal response matrix\n" "$0"
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done



AOinitMode="0"      # default
CPUset="NULL"
delayRM1us="0"
NBpokeCycle="0"
NBpokeCycleInner="3"

while getopts :hrc:d:n:i: FLAG; do
    case $FLAG in
        r) # re-use AO configuration
            AOinitMode="1"
            echo "AOinitMode = ${AOinitMode}"
            ;;
        c)
            CPUset="$OPTARG"
            ;;
        d)
            delayRM1us="$OPTARG"
            ;;
        n)
            NBpokeCycle="$OPTARG"
            ;;
        i)
            NBpokeCycleInner="$OPTARG"
            ;;
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi






PokeAmpl="$1"
PokeDelay_fr="$2"
PokeAveNB_fr="$3"
PokeNBExcl_fr="$4"
normalize_flag="$5"




loopnb=$( head -1 LOOPNUMBER )
dmindex=$( head -1 fpsconf/AOCONF/DMindex | awk '{print $1;}' )



pname0=$0
pname="aol${loopnb}zrespM"


if [ ! -f ./conf/RMpokeCubeZ.fits.gz ]; then
    #DMxsize=$( head -1 ./conf/param_DMxsize.txt )
    #DMysize=$( head -1 ./conf/param_DMysize.txt )
    DMxsize=$( head -1 fpsconf/AOCONF/DMxsize | awk '{print $1;}' )
    DMysize=$( head -1 fpsconf/AOCONF/DMysize | awk '{print $1;}' )

    ./AOloopControl << EOF
aolmksimplezpM ${DMxsize} ${DMysize} pokeM
savefits pokeM "!./conf/RMpokeCubeZ.fits"
exitCLI
EOF
    gzip ./conf/RMpokeCubeZ.fits
fi

if [ ! -f ./conf/RMpokeCube.fits.gz ]; then
    cp ./conf/RMpokeCubeZ.fits.gz ./conf/RMpokeCube.fits.gz
fi




# flush tmpRMacq directory
rm tmpRMacqu/*

OMP_NUM_THREADS=1 ./AOloopControl -n $pname << EOF
cacao.aolnb $loopnb
csetpmove ${CPUset}
loadfits "./conf/RMpokeCube.fits" RMpokeCube
#savefits RMpokeCube "!_RMpokeCube_test00.fits"
cacaoac.aolmeaslWFSrespC ${PokeAmpl} ${PokeDelay_fr} ${delayRM1us} ${PokeAveNB_fr} ${PokeNBExcl_fr} RMpokeCube wfsresp wfsref ${normalize_flag} ${AOinitMode} ${NBpokeCycle} ${NBpokeCycleInner}
savefits wfsresp "!zrespmat0.fits"
savefits wfsref "!wfsref00.fits"
listim
exitCLI
EOF

rm tmpRMacquZ/*
mkdir -p tmpRMacquZ
mv tmpRMacqu/* tmpRMacquZ
