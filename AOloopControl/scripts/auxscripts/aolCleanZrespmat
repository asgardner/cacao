#! /bin/bash

NBARGS=6
pname=`echo "$0" | sed "s/\.\///g"`







function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : Cleans zonal resp matrix $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "Cleans zonal response matrices in ./zresptmp/ directory"
    echo "if images conf/RMpixindex.fits conf/RMHmat.fits exist, use Hadamard coding/decoding"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-h] <RM ampl> <WFSn flag> <DMperc0> <DMcoeff0> <DMperc1> <DMcoeff1>"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)          help"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "     <RM ampl>      RM amplitude [um]"
    echo "     <WFSn flag>    WFS normalization flag"
    echo "     <DMperc0>      DM map: background noise level percentile"
    echo "     <DMcoeff0>     DM map: background coefficient (ususally 1.0)"
    echo "     <DMperc1>      DM map: percentile level above background"
    echo "     <DMcoeff1>     DM map: coefficient on level above background"
    echo ""
    echo " $(tput bold)OUTPUT:$(tput sgr0)"
    echo "  zrespmat.fits    : zonal response matrix"
    echo "  wfsref0.fits     : wfs reference"
    echo "  wfsmap.fits      : WFS response map"
    echo "  dmmap.fits       : DM response map"
    echo "     wfsmask.fits"
    echo "     dmmaskRM.fits"
    echo "     dmslaved.fits"
    echo "     dmmask.fits"
    echo ""
    echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Cleans zonal resp matrix\n" "$0"
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done





while getopts :h FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi





# arg 1: parameter name
# arg 2: default value
#
# param value is stored in variable "paramvalue"
function ConfReadParam {
    file="./conf/param_$1.txt"
    if [ -f "$file" ]; then
        paramvalue=$( head -1 $file )
    else
        paramvalue="$2"
        echo "$2" > $file
    fi
}



DMmaskRMp0=0.2
if [ -f "./conf/conf_DMmaskRMp0.txt" ]; then
    DMmaskRMp0=$( head -1 ./conf/conf_DMmaskRMp0.txt )
fi


DMmaskRMc0=1.0
if [ -f "./conf/conf_DMmaskRMc0.txt" ]; then
    DMmaskRMc0=$( head -1 ./conf/conf_DMmaskRMc0.txt )
fi


DMmaskRMp1=0.7
if [ -f "./conf/conf_DMmaskRMp1.txt" ]; then
    DMmaskRMp1=$( head -1 ./conf/conf_DMmaskRMp1.txt )
fi


DMmaskRMc1=0.3
if [ -f "./conf/conf_DMmaskRMc1.txt" ]; then
    DMmaskRMc1=$( head -1 ./conf/conf_DMmaskRMc1.txt )
fi




WFSmaskRMp0=0.05
if [ -f "./conf/conf_WFSmaskRMp0.txt" ]; then
    WFSmaskRMp0=$( head -1 ./conf/conf_WFSmaskRMp0.txt )
fi


WFSmaskRMc0=1.0
if [ -f "./conf/conf_WFSmaskRMc0.txt" ]; then
    WFSmaskRMc0=$( head -1 ./conf/conf_WFSmaskRMc0.txt )
fi


WFSmaskRMp1=0.65
if [ -f "./conf/conf_WFSmaskRMp1.txt" ]; then
    WFSmaskRMp1=$( head -1 ./conf/conf_WFSmaskRMp1.txt )
fi


WFSmaskRMc1=0.3
if [ -f "./conf/conf_WFSmaskRMc1.txt" ]; then
    WFSmaskRMc1=$( head -1 ./conf/conf_WFSmaskRMc1.txt )
fi















loopnb=$( head -1 LOOPNUMBER )

pname0=$0
pname="aol${loopnb}zrespM"


./AOloopControl -n $pname << EOF
cacao.aolnb $loopnb
loadfits "./conf/RMpokeCube.fits" RMpokeC
loadfits "./conf/RMHmat.fits" Hmat
loadfits "./conf/RMpixindex.fits" pixindexim
aolcleanzrm zrespmat wfsref0 wfsmap dmmap $1 $2

savefits zrespmat "!zrespmat.fits"
savefits wfsref0 "!wfsref0.fits"
savefits wfsmap "!wfsmap.fits"
savefits dmmap "!dmmap.fits"
#savefits wfsmask "!wfsmask.fits"
#savefits dmmask "!dmmaskRM.fits"
listim
exitCLI
EOF

#stageddir="conf_zrm_staged"
#cp zrespmat.fits ./${stageddir}/
#cp dmmap.fits ./${stageddir}/
#cp wfsmap.fits ./${stageddir}/



#./auxscripts/mkDMslaveActprox dmmaskRM.fits 2.5
