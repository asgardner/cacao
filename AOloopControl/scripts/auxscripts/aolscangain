#!/bin/bash


NBARGS=4
pname=`echo "$0" | sed "s/\.\///g"`




function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : AO scan gain for optimal value $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "  AO scan gain for optimal value"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-h] <telemetry log> <block> <multf> <latency>"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)          help"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "   <telemetry log>   : pseudo-open loop WFS telemetry"
    echo "   <block>           : block number"
    echo "   <multf>           : multiplicative factor (leak)"
    echo "   <latency>         : latency [frame]"
    echo ""
    echo " $(tput bold)OUTPUT:$(tput sgr0)"
    echo ""
    echo " $(tput bold)EXAMPLE:$(tput sgr0)"
    echo " $0 wfsmodes_ol.fits 3 0.98 2.36"
    echo ""
    echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       AO scan gain for optimal value\n" "$0"
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done


while getopts :h FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi






loopnb=$( head -1 LOOPNUMBER )
GPUindex=$1

./AOloopControl -n aol${loopnb}scangain << EOF
readshmim aol${loopnb}_mode_blknb
loadfits "$1" olwfsmeas
mselblock olwfsmeas aol${loopnb}_mode_blknb $2 olwfsmeasblk
savefits olwfsmeasblk "!olwfsmeasblk.fits"
mscangain olwfsmeasblk $3 $4
listim
exitCLI
EOF

cp gainscan.txt gainscan.$2.txt
