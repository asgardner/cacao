#!/bin/bash

# number of arguments to script
NBARGS=4


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`




function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : SET MODE VALUE LIMITS $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo " n = mode number"
    echo " limit = lmin + lmax exp(-(n/n0)^alpha)"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-h] <lmin> <lmax> <n0> <alpha>"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "     <lmin>     floor value (for high order modes)"
    echo "     <lmax>     peak value (for low order modes)"
    echo "     <n0>       decay rate"
    echo "     <alpha>    exponent"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Compute real-time WFS residual image\n" "$0"
}



# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done


while getopts :h FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))




if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi

loopnb=$( head -1 LOOPNUMBER )



./AOloopControl << EOF
readshmim aol${loopnb}_DMmode_LIMIT
im2coord aol${loopnb}_DMmode_LIMIT 0 imx
imout=$1+$2*exp(0-(imx/$3)^$4)
cp imout aol${loopnb}_DMmode_LIMIT
exitCLI
EOF
